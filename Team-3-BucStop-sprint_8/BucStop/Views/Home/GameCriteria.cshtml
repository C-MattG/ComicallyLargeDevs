
ï»¿@{
    ViewData["Title"] = "Game Criteria";
}

<!--Inserted HTML-->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Submission Form</title>

  <!-- Link to an external CSS file -->
  <link rel="stylesheet" href="Form.css">
  
</head>
<body>

<!-- Page detailing what criteria a game should meet to be added to the site.-->

<h1>@ViewData["Title"]</h1>

<p>In order to have your game listed on BucStop, your game needs to meet certain criteria: </p>

<ul>
    <li>Must have a name which is not offensive and is less than 50 characters long</li>
    <li>Must have controls which are able to be used on both PC and mobile</li>

        <ul>
            <li>Recommendation is to have it use the arrow keys, as the site will already map swipes to the keys</li>
        </ul>
    <li>Must not contain any offensive material</li>
        <ul>
        <li>Offensive material: material which would give a negative impression of the school</li>
                <ul>
                    <li>Including but not limited to: use of expletives, gore/excessive violence, use of controlled substances, suggestive material, racially insensitive content, illegal material, et cetera</li>
                </ul>
        </ul>

    <li>Must be written in Javascript</li>
    <li>Must not have advertisements</li>
    <li>Must not contain any software which could be deemed as malicious</li>
    <li>Must not contain excessive flashing lights or loud sounds</li>
    <li>Must not infringe on any existing copyrighted material</li>
    <li>The file size of the game and all other necessary materials (including images, sounds, et cetera) should not exceed 10MB</li>
    <li>The canvas of the game must be within 640 px by 640 px</li>
    <li>Must not collect user data outside of the bare minimum to save progress in the game</li>
    <li>Any non-javascript files necessary for the game to run must be included in a folder</li>
</ul>
<hr>
<h1>Add your game</h1>



<!--Form stuff. Temporary text box submission for testing-->
<h2>Submit Your JS file</h2>

<!-- Used ChatGTP and prompted 'edit the code to take only JS files inputs' using the code from the text box format perviously -->
<!-- The form will submit JS files only -->
<form id="textForm">
  <!-- This should render as a file input box -->
  <input type="file" id="fileInput" accept=".js" />
  <button type="submit">Submit</button>
</form>

<!-- Display messages -->
<p id="message" style="display: none; color: white;">Your game is under review</p>
<p id="errorMessages" style="color: red;"></p>

<script>
  // Function to handle JS file form submission
  document.getElementById('textForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent form from submitting the traditional way
    
    // Get the file from the input
    const fileInput = document.getElementById('fileInput');
    const file = fileInput.files[0];
    
    // Error handling
    let errorMessages = [];
    let successMessages = [];

    if (!file) {
      // If no file is selected, display an error message
      errorMessages.push('Please select a .js file.');
    } else {
      // If a file is selected, return a success message
      successMessages.push('File selected successfully.');
    }
    
    // Check if the file is a .js file
    if (file && (file.type !== 'application/javascript' && file.name.split('.').pop() !== 'js')) {
      // If the file is not a .js file, display an error message
      errorMessages.push('Only .js files are allowed.');
    } else {
      // If the file is a .js file, return a success message
      successMessages.push('File is a valid .js file.');
    }

    // Validate the file size (max 10MB)
    if (file && file.size > 10 * 1024 * 1024) {
      errorMessages.push('File size cannot exceed 10MB.');
    } else if (file) {
      // If the file is within size limit, return a success message
      successMessages.push('File size is within the 10MB limit.');
    }

    // Validate file name length (taking off the .js to not count towards total)
    if (file) {
      const fileNameWithoutExt = file.name.replace('.js', '');
      if (fileNameWithoutExt.length > 50) {
        errorMessages.push('File name cannot exceed 50 characters.');
      } else {
        // If file name length is valid, return a success message
        successMessages.push('File name length is within the 50 character limit.');
      }
    }

    // If there are any errors, display them and stop the process
    if (errorMessages.length > 0) {
      document.getElementById('errorMessages').textContent = errorMessages.join(' ');
      document.getElementById('successMessages').textContent = '';
      return; // Do not proceed with the submission
    }

    // If there are any success messages, display them
    document.getElementById('successMessages').textContent = successMessages.join(' ');

    // Read file content to check canvas size
    const reader = new FileReader();
    reader.onload = function(event) {
      const scriptContent = event.target.result;

      const canvasSizeRegex = /canvas\.(width|height)\s*=\s*(\d+)/g;
      let match;
      let canvasErrors = [];
      let canvasPassMessages = [];

      while ((match = canvasSizeRegex.exec(scriptContent)) !== null) {
        if (parseInt(match[2], 10) > 640) {
          canvasErrors.push(`Canvas ${match[1]} cannot exceed 640px. Found: ${match[2]}px`);
        } else {
          canvasPassMessages.push(`Canvas ${match[1]} is within the 640px limit. Found: ${match[2]}px`);
        }
      }

      // If there are any canvas validation errors, display them and stop the process
      if (canvasErrors.length > 0) {
        document.getElementById('errorMessages').textContent += ' ' + canvasErrors.join(' ');
        document.getElementById('successMessages').textContent = '';
        return; // Do not proceed with the submission
      }

      // If there are any canvas pass messages, display them
      if (canvasPassMessages.length > 0) {
        document.getElementById('successMessages').textContent += ' ' + canvasPassMessages.join(' ');
      }

      // If all tests pass, show success message and simulate file submission to EBS storage
      document.getElementById('successMessages').textContent += ' File is ready to be submitted to future EBS storage.';

      // Temporary message for submission to EBS storage (simulation)
      document.getElementById('message').textContent = 'The file is successfully validated and will be submitted to EBS storage soon.';

      // Optionally, you can log the file submission (simulate submission to EBS storage)
      console.log('File ready for EBS storage submission:', file.name);

      // Optionally, reset the form after successful submission
      document.getElementById('textForm').reset();
    };

    reader.readAsText(file);
  });
</script>



</body>
</html>
