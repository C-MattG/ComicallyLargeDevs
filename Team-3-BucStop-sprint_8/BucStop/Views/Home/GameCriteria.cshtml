@{
  ViewData["Title"] = "Game Criteria";
}

<!-- Inserted HTML -->
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Submission Form</title>


  <!-- Inline CSS -->
  <style>
    /* Style for the file submission form */
    form {
      margin: 20px;
      padding: 20px;
      border: 2px solid #ccc;
      /* background-color: lightgray;*/
      display: flex;
      flex-direction: column;
      max-width: 300px;
    }

    .content {
      background-color: rgba(255, 255, 255, 0.8); /* White with 80% opacity */
      padding: 20px; 
      color: #111344;
    }

    p {
      font-size: 20px;
      color: #111344;
    }

    input[type="file"] {
      margin-bottom: 10px;
    }

    button {
      background-color: #4CAF50;
      color: white;
      padding: 10px;
      border: none;
      cursor: pointer;
    }

    button:hover {
      background-color: #45a049;
    }

    /* Style for the criteria list */
    ul {
      list-style-type: none;
      padding: 0;
      color: #111344;
    }

    li {
      font-size: 20px;
      padding: 5px;
      color: #111344;
    }

    .pass {
      color: lightgreen;
    }

    .fail {
      color: red;
    }

    /* Style for the messages */
    #errorMessages {
      font-size: 20px;
      color: red;
      font-weight: bold;
    }

    #successMessages {
      font-size: 20px;
      color: lightgreen;
      font-weight: bold;
    }

    /* Message indicating the game is under review */
    #message {
      display: none;
      color: white;
      padding: 10px;
      margin-top: 20px;
      font-size: 20px;
      text-align: center;
    }
  </style>

  <!-- Link to an external CSS file -->
  <link rel="stylesheet" href="site.css">

</head>

<body>

  <!-- Page detailing what criteria a game should meet to be added to the site. -->

  <h1>@ViewData["Title"]</h1>

    <hr>
    <div class="content">
      <div class="criteria-section">
          <p>In order to have your game listed on BucStop, your game needs to meet certain criteria:</p>
          
          <hr>

          <ul>
              <li>Must have a name which is not offensive and is less than 50 characters long</li>
              <li>Must have controls which are able to be used on both PC and mobile
                  <ul>
                      <li>Recommendation is to have it use the arrow keys, as the site will already map swipes to the keys</li>
                  </ul>
              </li>
              <li>Must not contain any offensive material
                  <ul>
                      <li>Offensive material: material which would give a negative impression of the school
                          <ul>
                              <li>Including but not limited to: use of expletives, gore/excessive violence, use of controlled substances,
                                  suggestive material, racially insensitive content, illegal material, et cetera</li>
                          </ul>
                      </li>
                  </ul>
              </li>
              <li>Must be written in Javascript</li>
              <li>Must not have advertisements</li>
              <li>Must not contain any software which could be deemed as malicious</li>
              <li>Must not contain excessive flashing lights or loud sounds</li>
              <li>Must not infringe on any existing copyrighted material</li>
              <li>The file size of the game and all other necessary materials (including images, sounds, et cetera) should not exceed 10MB</li>
              <li>The canvas of the game must be within 640 px by 640 px</li>
              <li>Must not collect user data outside of the bare minimum to save progress in the game</li>
              <li>Any non-javascript files necessary for the game to run must be included in a folder</li>
          </ul>
      </div>

      <hr>
    </div>

    <br>

    <h1>Add your game</h1>
    <h2>Submit Your JS file</h2>
    <hr>

    <div class="content"> 
      <div class="add-game-section">
          <div class="form-section">
              <!-- The form will submit JS files only -->
              <form id="textForm" enctype="multipart/form-data" style="background-color: lightgray;">
                  <!-- This should render as a file input box -->
                  <input type="file" id="fileInput" accept=".js" style="font-size: 20px;" />
                  <button type="submit" style="font-size: 20px;">Submit</button>
              </form>
          </div>

          <div class="message-section">
              <!-- Display messages -->
              <p id="message" style="display: none; color: white;">Your game is under review</p>
              <p id="errorMessages" style="color: red;"></p>
              <p id="successMessages" style="color: lightgreen;"></p>
          </div>

          <div class="criteria-list-section">
              <!-- Criteria List (Where pass/fail results will show) -->
              <ul id="criteriaList"></ul>
          </div>
      </div>
  </div>

  <script>
    // Function to handle JS file form submission
    document.getElementById('textForm').addEventListener('submit', function (event) {
      event.preventDefault(); // Prevent form from submitting the traditional way

      // Get the file from the input
      const fileInput = document.getElementById('fileInput');
      const file = fileInput.files[0];

      // Error handling
      let errorMessages = [];
      let successMessages = [];

      // Select the criteria elements to display feedback
      const criteriaList = document.getElementById('criteriaList');
      criteriaList.innerHTML = ''; // Clear previous messages

      // Check if a file is selected
      let fileSelected = true;
      if (!file) {
        fileSelected = false;
        errorMessages.push('Please select a .js file.');
      } else {
        successMessages.push('File selected successfully.');
      }
      // Add the result to the criteria list (pass or fail)
      criteriaList.innerHTML += `<li class="${fileSelected ? 'pass' : 'fail'}">File selected: ${fileSelected ? 'Passed' : 'Failed'}</li>`;

      // Check if the file is a .js file
      let isValidJs = true;
      if (file && (file.type !== 'application/javascript' && file.name.split('.').pop() !== 'js')) {
        isValidJs = false;
        errorMessages.push('Only .js files are allowed.');
      } else {
        successMessages.push('File is a valid .js file.');
      }
      // Add the result to the criteria list (pass or fail)
      criteriaList.innerHTML += `<li class="${isValidJs ? 'pass' : 'fail'}">File type is .js: ${isValidJs ? 'Passed' : 'Failed'}</li>`;

      // Validate the file size (max 10MB)
      let isSizeValid = true;
      if (file && file.size > 10 * 1024 * 1024) {
        isSizeValid = false;
        errorMessages.push('File size cannot exceed 10MB.');
      } else if (file) {
        successMessages.push('File size is within the 10MB limit.');
      }
      // Add the result to the criteria list (pass or fail)
      criteriaList.innerHTML += `<li class="${isSizeValid ? 'pass' : 'fail'}">File size within limit: ${isSizeValid ? 'Passed' : 'Failed'}</li>`;

      // Validate file name length (taking off the .js to not count towards total)
      let isFileNameValid = true;
      if (file) {
        const fileNameWithoutExt = file.name.replace('.js', '');
        if (fileNameWithoutExt.length > 50) {
          isFileNameValid = false;
          errorMessages.push('File name cannot exceed 50 characters.');
        } else {
          successMessages.push('File name length is within the 50 character limit.');
        }
      }
      // Add the result to the criteria list (pass or fail)
      criteriaList.innerHTML += `<li class="${isFileNameValid ? 'pass' : 'fail'}">File name length valid: ${isFileNameValid ? 'Passed' : 'Failed'}</li>`;

      // If there are any errors, display them and stop the process
      if (errorMessages.length > 0) {
        document.getElementById('errorMessages').textContent = errorMessages.join(' ');
        document.getElementById('successMessages').textContent = '';
        return; // Do not proceed with the submission
      }

      // If there are any success messages, display them
      document.getElementById('successMessages').textContent = successMessages.join(' ');

      // Read file content to check canvas size
      const reader = new FileReader();
      reader.onload = function (event) {
        const scriptContent = event.target.result;

        // Regex to capture canvas width and height assignments (no spaces around =)
        const canvasSizeRegex = /canvas\.(width|height)=(\d+);/g;
        let match;
        let canvasErrors = [];
        let canvasPassMessages = [];
        let canvasSizeFeedback = [];

        let currentWidth = null;
        let currentHeight = null;
        let canvasPass = true;  // Flag to track overall pass/fail for canvas size

        // Loop through the script content to capture width/height assignments
        while ((match = canvasSizeRegex.exec(scriptContent)) !== null) {
          const dimension = match[1]; // 'width' or 'height'
          const value = parseInt(match[2], 10);

          console.log(`Captured canvas ${dimension}: ${value}`); // Debugging log

          // Capture width and height values
          if (dimension === 'width') {
            currentWidth = value;
          } else if (dimension === 'height') {
            currentHeight = value;
          }

          // Check if the canvas dimension exceeds 640px
          if ((dimension === 'width' && value > 640) || (dimension === 'height' && value > 640)) {
            canvasErrors.push(`Canvas ${dimension} cannot exceed 640px. Found: ${value}px`);
            canvasPass = false; // Mark as fail if any dimension exceeds 640px
          } else {
            canvasPassMessages.push(`Canvas ${dimension} is within the 640px limit. Found: ${value}px`);
          }

          // Collect feedback for both pass and fail scenarios
          canvasSizeFeedback.push(`Canvas ${dimension} size: ${value}px`);
        }

        // If both width and height are found, log their size
        if (currentWidth !== null && currentHeight !== null) {
          canvasPassMessages.push(`Current canvas size - Width: ${currentWidth}px, Height: ${currentHeight}px`);
        }

        // Add canvas size pass/fail status to the criteria list
        criteriaList.innerHTML += `<li class="${canvasPass ? 'pass' : 'fail'}">Canvas size validation: ${canvasPass ? 'Passed' : 'Failed'}</li>`;

        // If there are any canvas validation errors, display them and stop the process
        if (canvasErrors.length > 0) {
          document.getElementById('errorMessages').textContent += ' ' + canvasErrors.join(' ');
          document.getElementById('successMessages').textContent = '';


          return; // Do not proceed with the submission
        }

        // If there are any canvas pass messages, display them
        if (canvasPassMessages.length > 0) {
          document.getElementById('successMessages').textContent += ' ' + canvasPassMessages.join(' ');
        }

        // Always display the canvas size feedback (pass or fail)
        document.getElementById('successMessages').textContent += ' ' + canvasSizeFeedback.join(' ');

        // Temporary message for submission to EBS storage (simulation)
        document.getElementById('message').textContent = 'The file is successfully validated and will be submitted to EBS storage soon.';
      };

      reader.readAsText(file);
    });
  </script>
  <script>
    document.getElementById('textForm').addEventListener('submit', async function(event) {
      event.preventDefault();

      const fileInput = document.getElementById('fileInput');
      const file = fileInput.files[0];
      const errorElement = document.getElementById('errorMessages');
      const messageElement = document.getElementById('message');

      if (!file || file.size > 10 * 1024 * 1024 || file.name.length > 54) {
        errorElement.textContent = "File invalid (size, name, or type).";
        return;
      }

      const formData = new FormData();
      formData.append("gameFile", file);

      try {
        const response = await fetch("https://torntiugo2.execute-api.us-east-2.amazonaws.com/prod/Games", {
          method: "POST",
          body: formData
        });

        const text = await response.text();
        if (response.ok) {
          messageElement.style.display = "block";
          errorElement.textContent = "";
          errorElement.style.display = "none";
        } else {
          throw new Error(text || "Upload failed");
        }
      } catch (error) {
        errorElement.style.display = "block";
        errorElement.textContent = "Upload failed: " + error.message;
        console.error("Upload error:", error.message);
      }
    });
  </script>

</body>

</html>